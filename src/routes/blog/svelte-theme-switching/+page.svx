---
layout: blog

title: Svelte 5 Theme Switching
description: Creating a server-first theme switcher to avoid the infamous flash of white.
tags: ["tailwindcss", "shadcn", "svelte", "typescript"]

published: 03/31/25
lastEdited: 03/31/25
---

<script>
  import Callout from "$lib/components/blog/callout.svelte";
  import LinkCard from "$lib/components/blog/link-card.svelte";
  import CodeHeader from "$lib/components/blog/code-header.svelte";
</script>

## A Basic Concept

Although implementing a theme toggle feature in modern frameworks that mix the use of SSR & CSR has
been done more times than I can count, resources detailing how to do it in SvelteKit aren't as saturated
as I'd like. More particularly, doing it in Svelte5 and focusing on a server-first rendering style to
avoid the horrid flash of light you get when the theme is only determined on the client side.

<Callout type="info">
  If there is anything wrong in this article, feel free to reach out at my socials in the footer
</Callout>

### The Flash

The flash has a simple explanation, the server renders the HTML and applies the styling set by the CSS
and sends it on over to the client. Of course, by default it's going to set it to white if no custom
background colour is used. If you set the background colour to `#FF0000` then you'd instead see a flash
of red.

<CodeHeader fileName="example.css" />

```css
body {
  background-color: #FF0000;
}
```

So we know what happens by default, how do we have a user chosen value dictate what styling is applied
as the HTML is rendered on the server?

## Avoiding It All

*"By default, SvelteKit will render (or prerender) any component first on the server and send it to the
client as HTML. It will then render the component again in the browser to make it interactive in a process
called hydration."* - Svelte Docs

Generally, for other frameworks the easy option is to use cookies to store the theme value and send said
cookie over the wire between the server and the client. But at least here in SvelteKit land and probably
in any other framework as I may be misunderstanding how common libraries implement the theme storage, we
can use a static file.

<LinkCard linkUrl="https://github.com/pacocoursey/next-themes" title="NextJS Theme Library">
  A popular and up-to-date theme helper library
</LinkCard>

Let's rewind and setup a SvelteKit app to start with:

<CodeHeader fileName="example.sh" />

```bash
bunx sv create svelte-playground
```

Follow the prompts and configure your app as you wish. Next, change into your new app directory and run
your package manager's install command:

<CodeHeader fileName="example.sh" />

```bash
cd svelte-playground
bun install
```

<Callout type="warn">
  Keep in mind, depending on your runtime your command may vary
</Callout>

Now we're all setup, let's create a JavaScript file and place it into the "static" directory. Although
the file will only be run client-side and interact with browser APIs like `document` and `window`, the
key part will be where we import it within the app's HTML file.

<CodeHeader fileName="theme.js" />

```js
const storedTheme = localStorage.getItem("theme");

if (storedTheme) {
  // We now have access to the value set in "storedTheme"
} else {
  // No value set in storage, initialise it and default the value
}
```

The first case we want to check is if we're hydrating the HTML when there's already a set value within
`localStorage` and if so, you can for example, set an attribute on an element in the DOM that your app
CSS can read and style the body's elements accordingly. On the flip side, we need to set a default value
if there's not an existing one where you may want to take advantage of the below code:

<CodeHeader fileName="example.js" />

```js
window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
```

### The Fix

Getting back to the "flashing on reload" problem that got you here in the first place, the fix is just a
good old understanding of HTML and the order it's rendered. Now we have a static JavaScript file we can
reference, upon hydration we can import and run the file **before** even getting to rendering the body's
contents.

<CodeHeader fileName="app.html" />

```html
<html lang="en">
  <head>
    <!-- ... -->
    <script src="%sveltekit.assets%/theme.js"></script>
  </head>
  <body>
    <!-- ... -->
  </body>
</html>
```

That's page loading covered, reactivity for when the user actually changes the theme (unless you want
a forced reload to occur) is another step but Svelte makes that easy. It's effectively whatever logic
you wrote to change your styling logic i.e. the attribute you set on a DOM element and also setting the
`localStorage` value.

<CodeHeader fileName="example.svelte" />

```svelte
<script lang="ts">
  let theme = $state("");

  function readTheme() {
    // ...
    theme = localStorage.getItem("theme");
  }

  function updateTheme() {
    // ...
    localStorage.setItem("theme", theme);
  }
</script>

<!-- ... -->
```
